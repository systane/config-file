server:
  port: 9092

eureka:
  instance:
    hostname: localhost
    port: 9091
  client:
    registerWithEureka: true
    fetchRegistry: false  
    serviceUrl:
      defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
  service:
    wait-time-in-ms-when-sync-empty: 3000

security:
  ouath2:
    client:
      access-token-validity-seconds: 1800 #tempo, em segundos, de duração do token de acesso
      authorized-grant-types: password, refresh_token #Qual o tipo do pedido de concessão de acesso. Se o client vai solicitar um token utilizando usuário e senha ou se vai retonvar um já existente.
      client_id: coderef #Identificador único que será usado pelo Client para solicitar concessão de acesso
      client-secret: $2a$10$p9Pk0fQNAQSesI4vuvKA0OZanDD2 #Senha para ser usada em conjunto com client_id como autenticação básico do client que está tentando obter um token de acesso
      resource-ids: resources #Identificador dos recursos disponíveis, se especificado aqui também deve ser especificado no servidor de recursos.
      scope: read, write #Os escopos que o Client terá acesso.

spring:
  datasource:
    data: classpath:/sql/data.sql #Arquivo sql que será executado após a propriedade schema.
    driver-class-name: com.mysql.jdbc.Driver
    password: root
    platform: mysql
    schema: classpath:/sql/schema.sql #arquivo com a estrutura do banco de dados. Como as classes que mapeiam os dados de segurança estão nas bibliotecas do Spring, elas não são criadas automaticamentee pelo JPA
    url: jdbc:mysql://springcloud.cqjgc0jmeyma.us-east-1.rds.amazonaws.com:3306/springCloudDB?verifyServerCertificate=false&useSSL=false&requireSSL=false #url de acesso ao banco de dados
    username: root
  jpa:
    database-platform: org.hibernate.dialect.MySQLDialect
    generate-ddl: false
    hibernate:
      ddl-auto: none
    show-sql: true

